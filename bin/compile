#!/usr/bin/env bash

# Ensure wildcards in globs match dotfiles too.
shopt -s dotglob

indent() {
    sed -u 's/^/      /'
}

BUILD_DIR="$1"
CACHE_DIR="$2"
ENV_DIR="$3"
STAGE="$(mktemp -d)"

if [ ! -f "${ENV_DIR}/IMPLEMENTATION" ]; then
    echo "IMPLEMENTATION was not set. Aborting" | indent
    exit 1
fi
IMPLEMENTATION="$(cat "${ENV_DIR}/IMPLEMENTATION")"
SHARED="${STAGE}/$(basename ${IMPLEMENTATION})/shared"
echo '---------------'

# -RL follows symlink content and copies respectivly, so in in a copy - only files
(
    cp -RL "${BUILD_DIR}/implementations/${IMPLEMENTATION}" $STAGE &&
    echo "Using ${IMPLEMENTATION}" &&
    mkdir -p $SHARED &&
    mv "${BUILD_DIR}/shared/gems" "${SHARED}/gems" &&
    if [ -f "${BUILD_DIR}/shared/Gemfile" ]; then
      mv "${BUILD_DIR}/shared/Gemfile" "${SHARED}/Gemfile"
    else
      echo 'The old build'
    fi &&
    if [ -f "${STAGE}/$(basename "${IMPLEMENTATION}")/package.json" ]; then
      echo 'Using app personla package.json'
    else
      mv "${BUILD_DIR}/package.json" "${STAGE}/$(basename "${IMPLEMENTATION}")" &&
      mv "${BUILD_DIR}/yarn.lock" "${STAGE}/$(basename "${IMPLEMENTATION}")"
    fi &&
    if [ -f "${STAGE}/$(basename "${IMPLEMENTATION}")/Gemfile" ]
    then
        sed --in-place --regexp-extended --expression 's/([.]{2}\/)*shared\//shared\//' "${STAGE}/$(basename "${IMPLEMENTATION}")/Gemfile" "${STAGE}/$(basename "${IMPLEMENTATION}")/Gemfile.lock"
        sed --in-place --regexp-extended --expression 's/([.]{2}\/)*shared\//shared\//' "${STAGE}/$(basename "${IMPLEMENTATION}")/package.json" "${STAGE}/$(basename "${IMPLEMENTATION}")/yarn.lock"
    fi &&
    rm -rf "${BUILD_DIR}"/* &&
    mv "${STAGE}/$(basename "$IMPLEMENTATION")"/* $BUILD_DIR
)

if [ $? -ne 0 ]; then
    echo "FAILED to copy directory into place" | indent
    exit 1
fi

echo "Copied ${IMPLEMENTATION} to root of app successfully" | indent

